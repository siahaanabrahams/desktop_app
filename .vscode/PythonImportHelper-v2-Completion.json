[
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QUiLoader",
        "importPath": "PySide6.QtUiTools",
        "description": "PySide6.QtUiTools",
        "isExtraImport": true,
        "detail": "PySide6.QtUiTools",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "isExtraImport": true,
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_page",
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "isExtraImport": true,
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "admin_page.move_menu",
        "description": "admin_page.move_menu",
        "isExtraImport": true,
        "detail": "admin_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "admin_page.move_menu",
        "description": "admin_page.move_menu",
        "isExtraImport": true,
        "detail": "admin_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "admin_page.move_menu",
        "description": "admin_page.move_menu",
        "isExtraImport": true,
        "detail": "admin_page.move_menu",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "isExtraImport": true,
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "change_password_que",
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "isExtraImport": true,
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "create_new_user",
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "isExtraImport": true,
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "check_username",
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "isExtraImport": true,
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "find_username",
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "isExtraImport": true,
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "detect_page.move_menu",
        "description": "detect_page.move_menu",
        "isExtraImport": true,
        "detail": "detect_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "detect_page.move_menu",
        "description": "detect_page.move_menu",
        "isExtraImport": true,
        "detail": "detect_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "detect_page.move_menu",
        "description": "detect_page.move_menu",
        "isExtraImport": true,
        "detail": "detect_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "label_page.move_menu",
        "description": "label_page.move_menu",
        "isExtraImport": true,
        "detail": "label_page.move_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "importPath": "label_page.move_menu",
        "description": "label_page.move_menu",
        "isExtraImport": true,
        "detail": "label_page.move_menu",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "login_page.query",
        "description": "login_page.query",
        "isExtraImport": true,
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_id_user",
        "importPath": "login_page.query",
        "description": "login_page.query",
        "isExtraImport": true,
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_role",
        "importPath": "login_page.query",
        "description": "login_page.query",
        "isExtraImport": true,
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_id_operation",
        "importPath": "login_page.query",
        "description": "login_page.query",
        "isExtraImport": true,
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "log_in_session",
        "importPath": "login_page.query",
        "description": "login_page.query",
        "isExtraImport": true,
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "admin_page.change_password.change_password",
        "description": "admin_page.change_password.change_password",
        "peekOfCode": "def change_password(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"change_password.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "admin_page.change_password.change_password",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "admin_page.change_password.change_password",
        "description": "admin_page.change_password.change_password",
        "peekOfCode": "def change(self,ui) :\n    username = self.username\n    oldPasswordInput = ui.findChild(QLineEdit, 'oldPasswordInput').text()\n    newPasswordInput = ui.findChild(QLineEdit, 'newPasswordInput').text()\n    validation = check_password(username, oldPasswordInput) \n    if validation == False : \n        QMessageBox.warning(ui, \"Fail\", \"Old password is wrong\") \n    else : \n        change_password_que(username, newPasswordInput)\n        QMessageBox.information(ui, \"Success\", \"Change password success.\")",
        "detail": "admin_page.change_password.change_password",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "admin_page.create_user.create_user",
        "description": "admin_page.create_user.create_user",
        "peekOfCode": "def create_user(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"create_user.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "admin_page.create_user.create_user",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "admin_page.create_user.create_user",
        "description": "admin_page.create_user.create_user",
        "peekOfCode": "def create(ui) : \n    username = ui.findChild(QLineEdit, 'usernameInput').text()\n    password = ui.findChild(QLineEdit, 'passwordInput').text()\n    role = ui.findChild(QComboBox, 'roleInput').currentText()\n    if username and len(username) >= 8:\n        if password and len(password) >= 8 and re.search(r'\\d', password):\n            check_user = check_username(username) \n            if check_user is not True : \n                create_new_user(username, password, role)\n                QMessageBox.information(ui, \"Success\", \"User created.\")",
        "detail": "admin_page.create_user.create_user",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "admin_page.delete_user.delete_user",
        "description": "admin_page.delete_user.delete_user",
        "peekOfCode": "def delete_user(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"delete_user.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "admin_page.delete_user.delete_user",
        "documentation": {}
    },
    {
        "label": "find_user",
        "kind": 2,
        "importPath": "admin_page.delete_user.delete_user",
        "description": "admin_page.delete_user.delete_user",
        "peekOfCode": "def find_user(ui) :\n    username = ui.findChild(QLineEdit, 'usernameInput').text()\n    list_username = find_username(username)\n    username_list_widget = ui.findChild(QComboBox, 'usernameList')\n    username_list_widget.clear() \n    if list_username : \n        usernames = [user[0] for user in list_username]\n        username_list_widget.addItems(usernames)\n    else :\n        QMessageBox.warning(ui, \"Fail\", \"Username not found.\")",
        "detail": "admin_page.delete_user.delete_user",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "kind": 2,
        "importPath": "admin_page.move_menu",
        "description": "admin_page.move_menu",
        "peekOfCode": "def move_menu(self, page_select, index) :\n    selected_text = page_select.currentText()  \n    if selected_text == 'Create User' :\n        from admin_page.create_user.create_user import create_user\n        create_user(self)\n    elif selected_text == \"Delete User\" :\n        from admin_page.delete_user.delete_user import delete_user\n        delete_user(self)\n    elif selected_text == 'Change Password' :\n        from admin_page.change_password.change_password import change_password",
        "detail": "admin_page.move_menu",
        "documentation": {}
    },
    {
        "label": "create_new_user",
        "kind": 2,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "def create_new_user(username, password, role) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            INSERT INTO user_admin (username, password, role)\n            VALUES (:username, :password, :role)\n        \"\"\")\n        conn.execute(query, {'username' : username, 'password' : password, 'role' : role})\n        conn.commit()\ndef check_username (username) :\n    with engine.connect() as conn : ",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "check_usernam",
        "kind": 2,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "def check_username (username) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            select username\n            from user_admin\n            where username = :username\n        \"\"\")    \n        result = conn.execute(query, {'username' : username}).fetchone() \n    if result is not None : \n        return True",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "find_username",
        "kind": 2,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "def find_username(username) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            SELECT username\n            FROM user_admin\n            WHERE username ILIKE :username\n            AND role != 'admin'\n        \"\"\") \n        result = conn.execute(query, {'username': f\"%{username}%\"}).fetchall()\n    if result :",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "def check_password(username, password) :\n    with engine.connect() as conn :\n        query = text(\"\"\"\n            SELECT password\n            FROM user_admin\n            WHERE username = :username\n        \"\"\")\n        password_db = conn.execute(query, {'username' : username}).fetchone()\n        password_db = password_db[0] \n        if password == password_db : ",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "change_password_que",
        "kind": 2,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "def change_password_que(username, newPassword) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            UPDATE user_admin\n            SET password = :password\n            WHERE username = :username;\n        \"\"\")\n        conn.execute(query, {'username' : username, 'password' : newPassword})\n        conn.commit()",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "DB_URL = \"postgresql+pg8000://postgres:abraham@localhost:5432/postgres\"\nengine = create_engine(DB_URL) \ndef create_new_user(username, password, role) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            INSERT INTO user_admin (username, password, role)\n            VALUES (:username, :password, :role)\n        \"\"\")\n        conn.execute(query, {'username' : username, 'password' : password, 'role' : role})\n        conn.commit()",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "admin_page.query",
        "description": "admin_page.query",
        "peekOfCode": "engine = create_engine(DB_URL) \ndef create_new_user(username, password, role) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            INSERT INTO user_admin (username, password, role)\n            VALUES (:username, :password, :role)\n        \"\"\")\n        conn.execute(query, {'username' : username, 'password' : password, 'role' : role})\n        conn.commit()\ndef check_username (username) :",
        "detail": "admin_page.query",
        "documentation": {}
    },
    {
        "label": "real_time",
        "kind": 2,
        "importPath": "detect_page.real_time.real_time",
        "description": "detect_page.real_time.real_time",
        "peekOfCode": "def real_time(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"real_time.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "detect_page.real_time.real_time",
        "documentation": {}
    },
    {
        "label": "upload_menu",
        "kind": 2,
        "importPath": "detect_page.upload_menu.upload_menu",
        "description": "detect_page.upload_menu.upload_menu",
        "peekOfCode": "def upload_menu(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"upload_menu.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "detect_page.upload_menu.upload_menu",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "kind": 2,
        "importPath": "detect_page.move_menu",
        "description": "detect_page.move_menu",
        "peekOfCode": "def move_menu(self, page_select, index) :\n    selected_text = page_select.currentText()  \n    if selected_text == 'Upload' :\n        from detect_page.upload_menu.upload_menu import upload_menu\n        upload_menu(self)\n    elif selected_text == \"Real Time\" :\n        from detect_page.real_time.real_time import real_time\n        real_time(self)",
        "detail": "detect_page.move_menu",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "detect_page.query",
        "description": "detect_page.query",
        "peekOfCode": "DB_URL = \"postgresql+pg8000://postgres:abraham@localhost:5432/postgres\"\nengine = create_engine(DB_URL)",
        "detail": "detect_page.query",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "detect_page.query",
        "description": "detect_page.query",
        "peekOfCode": "engine = create_engine(DB_URL)",
        "detail": "detect_page.query",
        "documentation": {}
    },
    {
        "label": "handle_logout",
        "kind": 2,
        "importPath": "general_function.handle_logout",
        "description": "general_function.handle_logout",
        "peekOfCode": "def handle_logout(self) :   \n    from login_page.login_page import login_page \n    from general_function.query import log_out_session\n    id_operation = self.id_operation\n    log_out_session(id_operation)\n    self.id_user = None\n    self.username = None\n    self.password = None\n    self.role = None\n    self.id_operation = None",
        "detail": "general_function.handle_logout",
        "documentation": {}
    },
    {
        "label": "move_page",
        "kind": 2,
        "importPath": "general_function.move_page",
        "description": "general_function.move_page",
        "peekOfCode": "def move_page(self, page_select, index) :\n    selected_text = page_select.currentText()  \n    if selected_text == 'Main' :\n        from menu_page.menu_page import menu_page\n        menu_page(self)\n    elif selected_text == \"Detect\" :\n        from detect_page.upload_menu.upload_menu import upload_menu\n        upload_menu(self)\n    elif selected_text == \"Label\" :\n        from label_page.anomaly.anomaly import anomaly",
        "detail": "general_function.move_page",
        "documentation": {}
    },
    {
        "label": "log_out_session",
        "kind": 2,
        "importPath": "general_function.query",
        "description": "general_function.query",
        "peekOfCode": "def log_out_session(id_operation) :\n    with engine.connect() as conn:\n        query = text(\n            \"UPDATE operation SET end_time = NOW() WHERE id_operation = :id_operation\"\n        )\n        conn.execute(query, {\"id_operation\": id_operation})\n        conn.commit()",
        "detail": "general_function.query",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "general_function.query",
        "description": "general_function.query",
        "peekOfCode": "DB_URL = \"postgresql+pg8000://postgres:abraham@localhost:5432/postgres\"\nengine = create_engine(DB_URL)\ndef log_out_session(id_operation) :\n    with engine.connect() as conn:\n        query = text(\n            \"UPDATE operation SET end_time = NOW() WHERE id_operation = :id_operation\"\n        )\n        conn.execute(query, {\"id_operation\": id_operation})\n        conn.commit()",
        "detail": "general_function.query",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "general_function.query",
        "description": "general_function.query",
        "peekOfCode": "engine = create_engine(DB_URL)\ndef log_out_session(id_operation) :\n    with engine.connect() as conn:\n        query = text(\n            \"UPDATE operation SET end_time = NOW() WHERE id_operation = :id_operation\"\n        )\n        conn.execute(query, {\"id_operation\": id_operation})\n        conn.commit()",
        "detail": "general_function.query",
        "documentation": {}
    },
    {
        "label": "anomaly",
        "kind": 2,
        "importPath": "label_page.anomaly.anomaly",
        "description": "label_page.anomaly.anomaly",
        "peekOfCode": "def anomaly(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"anomaly.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "label_page.anomaly.anomaly",
        "documentation": {}
    },
    {
        "label": "defect",
        "kind": 2,
        "importPath": "label_page.defect.defect",
        "description": "label_page.defect.defect",
        "peekOfCode": "def defect(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"defect.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    menu_select = ui.findChild(QComboBox, 'menu')",
        "detail": "label_page.defect.defect",
        "documentation": {}
    },
    {
        "label": "move_menu",
        "kind": 2,
        "importPath": "label_page.move_menu",
        "description": "label_page.move_menu",
        "peekOfCode": "def move_menu(self, page_select, index) :\n    selected_text = page_select.currentText()  \n    if selected_text == 'Anomaly' :\n        from label_page.anomaly.anomaly import anomaly\n        anomaly(self)\n    elif selected_text == \"Defect\" :\n        from label_page.defect.defect import defect\n        defect(self)",
        "detail": "label_page.move_menu",
        "documentation": {}
    },
    {
        "label": "EnterEventFilter",
        "kind": 6,
        "importPath": "login_page.login_page",
        "description": "login_page.login_page",
        "peekOfCode": "class EnterEventFilter(QObject):\n    def __init__(self, parent, ui):\n        super().__init__()\n        self.parent = parent\n        self.ui = ui\n    def eventFilter(self, obj, event):\n        if event.type() == QEvent.KeyPress and event.key() in (Qt.Key_Return, Qt.Key_Enter):\n            handle_login(self.parent, self.ui)\n            return True  # Event sudah ditangani\n        return False  # Lanjutkan event seperti biasa",
        "detail": "login_page.login_page",
        "documentation": {}
    },
    {
        "label": "login_page",
        "kind": 2,
        "importPath": "login_page.login_page",
        "description": "login_page.login_page",
        "peekOfCode": "def login_page(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"login_page.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)\n    loginButton = ui.findChild(QPushButton, 'loginButton')\n    loginButton.clicked.connect(partial(handle_login, self, ui))\n    # Pasang event filter ke input username dan password",
        "detail": "login_page.login_page",
        "documentation": {}
    },
    {
        "label": "handle_login",
        "kind": 2,
        "importPath": "login_page.login_page",
        "description": "login_page.login_page",
        "peekOfCode": "def handle_login(self, ui):\n    from menu_page.menu_page import menu_page\n    self.username = ui.findChild(QLineEdit, 'usernameInput').text()\n    self.password = ui.findChild(QLineEdit, 'passwordInput').text()\n    username = self.username\n    password = self.password \n    if username and len(username) >= 8:\n        if password and len(password) >= 8:\n            auth_ = auth(username, password)\n            if auth_ is True:",
        "detail": "login_page.login_page",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 2,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "def auth(username, password) :\n    with engine.connect() as conn : \n        query = text(\n            \"SELECT * FROM user_admin WHERE username = :username AND password = :password\"\n        )\n        result = conn.execute(\n            query, {\"username\": username, \"password\": password}\n        ).fetchone()\n        if result is not None : \n            return True",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_id_user",
        "kind": 2,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "def get_id_user(username) :\n    with engine.connect() as conn :\n        query = text(\"\"\"\n            select id_user\n            from user_admin\n            where username = :username\n        \"\"\")\n        result = conn.execute(\n            query, {\"username\": username}\n        ).fetchone()",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_role",
        "kind": 2,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "def get_role(id_user) :\n    with engine.connect() as conn :\n        query = text(\"\"\"\n            select role\n            from user_admin\n            where id_user = :id_user\n        \"\"\")\n        result = conn.execute(\n            query, {\"id_user\": id_user}\n        ).fetchone()",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "get_id_operation",
        "kind": 2,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "def get_id_operation(id_user) :\n    with engine.connect() as conn:\n        query = text(\n            \"\"\"\n            SELECT id_operation \n            FROM operation \n            WHERE id_user = :id \n            ORDER BY start_time DESC \n            LIMIT 1\n            \"\"\"",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "log_in_session",
        "kind": 2,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "def log_in_session(id_user) :\n    with engine.connect() as conn : \n        query = text(\"\"\"\n            INSERT INTO operation (start_time, id_user)\n            VALUES (NOW(), :id_user)\n        \"\"\")\n        conn.execute(query, {\"id_user\": id_user})\n        conn.commit()",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "DB_URL = \"postgresql+pg8000://postgres:abraham@localhost:5432/postgres\"\nengine = create_engine(DB_URL)\ndef auth(username, password) :\n    with engine.connect() as conn : \n        query = text(\n            \"SELECT * FROM user_admin WHERE username = :username AND password = :password\"\n        )\n        result = conn.execute(\n            query, {\"username\": username, \"password\": password}\n        ).fetchone()",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "login_page.query",
        "description": "login_page.query",
        "peekOfCode": "engine = create_engine(DB_URL)\ndef auth(username, password) :\n    with engine.connect() as conn : \n        query = text(\n            \"SELECT * FROM user_admin WHERE username = :username AND password = :password\"\n        )\n        result = conn.execute(\n            query, {\"username\": username, \"password\": password}\n        ).fetchone()\n        if result is not None : ",
        "detail": "login_page.query",
        "documentation": {}
    },
    {
        "label": "menu_page",
        "kind": 2,
        "importPath": "menu_page.menu_page",
        "description": "menu_page.menu_page",
        "peekOfCode": "def menu_page(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"menu_page.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui) \n    username = self.username\n    titleText = ui.findChild(QLabel, 'titleText')\n    text = titleText.text().replace(\"{username}\", username)",
        "detail": "menu_page.menu_page",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "menu_page.query",
        "description": "menu_page.query",
        "peekOfCode": "DB_URL = \"postgresql+pg8000://postgres:abraham@localhost:5432/postgres\"\nengine = create_engine(DB_URL)",
        "detail": "menu_page.query",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "menu_page.query",
        "description": "menu_page.query",
        "peekOfCode": "engine = create_engine(DB_URL)",
        "detail": "menu_page.query",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "train_page.train",
        "description": "train_page.train",
        "peekOfCode": "def train(self):\n    loader = QUiLoader()\n    ui_path = os.path.join(os.path.dirname(__file__), \"train.ui\")\n    ui = loader.load(ui_path)\n    stack_widget = self.central_widget\n    stack_widget.addWidget(ui)\n    stack_widget.setCurrentWidget(ui)  \n    page_select = ui.findChild(QComboBox, 'comboBox')\n    page_select.currentIndexChanged.connect(partial(move_page, self, page_select))\n    logoutButton = ui.findChild(QPushButton, 'logoutButton')",
        "detail": "train_page.train",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        from login_page.login_page import login_page\n        super().__init__()\n        self.central_widget = QStackedWidget()\n        self.setCentralWidget(self.central_widget) \n        # Tambahkan halaman login\n        login_page(self)\nif __name__ == '__main__':\n    app = QApplication([])",
        "detail": "app",
        "documentation": {}
    }
]